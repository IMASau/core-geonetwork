-- Spring security
ALTER TABLE Users ADD security varchar(128) default '';
ALTER TABLE Users ADD authtype varchar(32);
ALTER TABLE users ALTER "password" TYPE character varying(120);

-- Support multiple profiles per user
ALTER TABLE usergroups ADD profile varchar(32);
UPDATE usergroups SET profile = (SELECT profile from users WHERE id = userid);
ALTER TABLE usergroups DROP CONSTRAINT usergroups_pkey;
ALTER TABLE usergroups ADD PRIMARY KEY (userid, profile, groupid);

ALTER TABLE Metadata ALTER harvestUri TYPE varchar(512);

ALTER TABLE HarvestHistory ADD elapsedTime int;

CREATE TABLE Services
  (
  
    id         int,
    name       varchar(64)   not null,
    class       varchar(1048)   not null,
    description       varchar(1048),
        
    primary key(id)
  );
  

CREATE TABLE ServiceParameters
  (
    id         int,
    service     int,
    name       varchar(64)   not null,
    value       varchar(1048)   not null,
    
    primary key(id),
        
    foreign key(service) references Services(id)
  );

-- === IMOS MODIFICATIONS - CRAIGJ 18/6/14 ===
--
-- Add missing 2.6 to 2.8 migration step  
--

-- ======================================================================
-- Create a gt_pk_metadata table if it doesn't already exist so that geotools
-- won't abort the transaction and fail to get the primary key info from the 
-- database - this is very likely due to a bug in geotools - however as long 
-- as the table exists geotools will be happy (rows are not required).
-- ie. THIS TABLE IS MEANT TO BE EMPTY.
-- More info at http://trac.osgeo.org/geonetwork/ticket/1169
-- DO NOT UNWRAP THIS LINE INTO MULTIPLE LINES! OTHERWISE IT WILL NOT EXECUTE 
-- CORRECTLY AND GEONETWORK WILL NOT BUILD THE DATABASE CORRECTLY

CREATE OR REPLACE FUNCTION create_gt_pk_metadata () RETURNS void AS $$ BEGIN IF NOT EXISTS ( SELECT * FROM   pg_catalog.pg_tables WHERE tablename  = 'gt_pk_metadata' AND schemaname = current_schema()) THEN CREATE TABLE gt_pk_metadata ( table_schema VARCHAR(32) NOT NULL, table_name VARCHAR(256) NOT NULL, pk_column VARCHAR(32) NOT NULL, pk_column_idx INTEGER, pk_policy VARCHAR(32), pk_sequence VARCHAR(64), unique (table_schema, table_name, pk_column), check (pk_policy in ('sequence', 'assigned', 'autogenerated'))); END IF; END; $$ LANGUAGE 'plpgsql';

SELECT create_gt_pk_metadata ();


